
from app.schemas.user import UserCreate
from typing import Union, Optional
from datetime import datetime, timedelta
from jose import jwt, JWTError
from fastapi import Depends, HTTPException, status, Security
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
import logging
import os
from app.core.database import get_db
from app.models.user import User

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤
UPLOAD_DIR = "uploads"
os.makedirs(UPLOAD_DIR, exist_ok=True)
SECRET_KEY = "your-secret-key"  # üîí –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–µ–∫—Ä–µ—Ç –∏–∑ .env
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30
REFRESH_TOKEN_EXPIRE_MINUTES = 60 * 24 * 7  # 7 –¥–Ω–µ–π


# –ò—Å–ø–æ–ª—å–∑—É–µ–º HTTPBearer –≤–º–µ—Å—Ç–æ OAuth2PasswordBearer
bearer_scheme = HTTPBearer()



def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)



def create_refresh_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=REFRESH_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)



async def get_user(db: AsyncSession, username: str | int):
    """
    –ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏–ª–∏ –ø–æ id (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —á–∏—Å–ª–æ).
    """
    if isinstance(username, int) or str(username).isdigit():
        logging.info(f"–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID: {username}")
        stmt = select(User).where(User.id == int(username))
    else:
        logging.info(f"–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username: {username}")
        stmt = select(User).where(User.username == username)

    result = await db.execute(stmt)
    user = result.scalars().first()

    if not user:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return user



async def get_user_by_email(db: AsyncSession, email: str):
    result = await db.execute(select(User).where(User.email == email))
    return result.scalars().first()



async def get_current_user(
    credentials: HTTPAuthorizationCredentials = Security(bearer_scheme),
    db: AsyncSession = Depends(get_db)
) -> User:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç JWT-—Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–∞–µ—Ç –∏–∑ –Ω–µ–≥–æ 'sub' (username –∏–ª–∏ ID)
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î.
    """
    token = credentials.credentials
    logging.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω: {token}")

    credentials_exception = HTTPException(
        status_code=status.HTTP_403_FORBIDDEN,
        detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω",
        headers={"WWW-Authenticate": "Bearer"},
    )

    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        logging.info(f"Payload —Ç–æ–∫–µ–Ω–∞: {payload}")

        user_identifier = payload.get("sub")
        if user_identifier is None:
            logging.warning("–í —Ç–æ–∫–µ–Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'sub'")
            raise credentials_exception

    except JWTError as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        raise credentials_exception

    # --- –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏–ª–∏ id ---
    user = await get_user(db, username=user_identifier)
    if user is None:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_identifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise credentials_exception

    return user


async def verify_refresh_token(token: Union[str, HTTPAuthorizationCredentials], db: AsyncSession):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å refresh token",
        headers={"WWW-Authenticate": "Bearer"},
    )
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç, –¥–æ—Å—Ç–∞—ë–º —Å—Ç—Ä–æ–∫—É —Ç–æ–∫–µ–Ω–∞
    if isinstance(token, HTTPAuthorizationCredentials):
        token = token.credentials

    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception

    user = await get_user(db, username=username)
    if user is None:
        raise credentials_exception
    return user




